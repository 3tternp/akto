package com.akto.action.gpt;

import com.akto.action.UserAction;
import com.akto.action.gpt.handlers.GptQuery;
import com.akto.action.gpt.handlers.QueryHandler;
import com.akto.action.gpt.handlers.QueryHandlerFactory;
import com.akto.dto.User;
import com.mongodb.BasicDBObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class VulnerabilityAnalysisAction extends UserAction {
    
    private static final Logger logger = LoggerFactory.getLogger(VulnerabilityAnalysisAction.class);
    public static final String USER_EMAIL = "user_email";
    
    private String responseOutput;
    private String vulnerabilityType;
    private BasicDBObject analysisResult;
    
    public String analyzeVulnerability() {
        try {
            User sUser = getSUser();
            logger.info("User {} requested vulnerability analysis for type: {}", sUser.getLogin(), vulnerabilityType);
            
            // Prepare metadata for the query handler
            BasicDBObject meta = new BasicDBObject();
            meta.put(USER_EMAIL, sUser.getLogin());
            meta.put("responseOutput", responseOutput);
            meta.put("vulnerabilityType", vulnerabilityType);
            
            // Get the appropriate query handler and execute
            GptQuery query = GptQuery.ANALYZE_VULNERABILITY;
            QueryHandler queryHandler = QueryHandlerFactory.getQueryHandler(query);
            analysisResult = queryHandler.handleQuery(meta);
            
            if (analysisResult == null) {
                throw new Exception("Received empty response from vulnerability analysis");
            }
            
            return SUCCESS.toUpperCase();
        } catch (Exception e) {
            logger.error("Error analyzing vulnerability", e);
            addActionError(e.getMessage());
            return ERROR.toUpperCase();
        }
    }
    
    public String getResponseOutput() {
        return responseOutput;
    }
    
    public void setResponseOutput(String responseOutput) {
        this.responseOutput = responseOutput;
    }
    
    public String getVulnerabilityType() {
        return vulnerabilityType;
    }
    
    public void setVulnerabilityType(String vulnerabilityType) {
        this.vulnerabilityType = vulnerabilityType;
    }
    
    public BasicDBObject getAnalysisResult() {
        return analysisResult;
    }
    
    public void setAnalysisResult(BasicDBObject analysisResult) {
        this.analysisResult = analysisResult;
    }
}