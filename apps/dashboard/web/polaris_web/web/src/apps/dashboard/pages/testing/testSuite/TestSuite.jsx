import { Button, HorizontalStack, Icon, IndexFiltersMode, Text, TextField } from "@shopify/polaris"
import PageWithMultipleCards from "../../../components/layouts/PageWithMultipleCards"
import TitleWithInfo from "../../../components/shared/TitleWithInfo"
import GithubSimpleTable from "../../../components/tables/GithubSimpleTable"
import { useEffect, useState } from "react"
import FlyLayoutSuite from "./FlyLayoutSuite"
import LocalStore from "../../../../main/LocalStorageStore";
import useTable from "../../../components/tables/TableContext"
import func from "../../../../../util/func"
import ShowListInBadge from "../../../components/shared/ShowListInBadge"
import transform from "./transform";
import api from "../api"
import { CellType } from "../../../components/tables/rows/GithubRow"


const sortOptions = [
    { label: 'Template Name', value: 'template asc', directionLabel: 'A-Z', sortKey: 'testSuiteName', columnIndex: 1 },
    { label: 'Template Name', value: 'template desc', directionLabel: 'Z-A', sortKey: 'testSuiteName', columnIndex: 1 },
];


const owaspTop10List = {
    "Broken Object Level Authorization": ["BOLA"],
    "Broken Authentication": ["NO_AUTH"],
    "Broken Object Property Level Authorization": ["EDE", "MA"],
    "Unrestricted Resource Consumption": ["RL"],
    "Broken Function Level Authorization": ["BFLA"],
    "Unrestricted Access to Sensitive Business Flows": ["INPUT"],
    "Server Side Request Forgery": ['SSRF'],
    "Security Misconfiguration": ["SM", "UHM", "VEM", "MHH", "SVD", "CORS", "ILM"],
    "Improper Inventory Management": ["IAM", "IIM"],
    "Unsafe Consumption of APIs": ["COMMAND_INJECTION", "INJ", "CRLF", "SSTI", "LFI", "XSS", "INJECT"]
}

function TestSuite() {
    const [show, setShow] = useState(false)
    const [data, setData] = useState({ 'all': [], 'by_akto': [], 'custom': [] })
    const [selectedTab, setSelectedTab] = useState('all')
    const [selectedTestSuite, setSelectedTestSuite] = useState({})
    const [createNewMode, setCreateNewMode] = useState(false)

    const localCategoryMap = LocalStore.getState().categoryMap
    const localSubCategoryMap = LocalStore.getState().subCategoryMap

    const { tabsInfo } = useTable()
    const [selected, setSelected] = useState(0)
    const definedTableTabs = ['All', 'By Akto', 'Custom'];
    const tableCountObj = func.getTabsCount(definedTableTabs, data)
    const tableTabs = func.getTableTabsContent(definedTableTabs, tableCountObj, setSelectedTab, selectedTab, tabsInfo)



    const headings = [
        {
            title: "Template name",
            text: "template_name",
            value: "name",
            textValue: "name",
            sortActive: true,
        },
        {
            title: "Total tests",
            text: "testCount",
            value: "testCount",
            textValue: "testCount",
        },
        {
            title: "Categories covered",
            text: "categoriesCovered",
            value: "categoriesCovered",
        },
        {
            title: '',
            type: CellType.ACTION,
        }
    ]

    let headers = JSON.parse(JSON.stringify(headings))

    const resourceName = {
        singular: 'test suite',
        plural: 'test suites',
    };

    const handleRowClick = (data) => {
        setShow(true)
        setSelectedTestSuite(data);
    };

    const fetchData = async () => {
        const listData = owaspTop10List;
        const subCategoryMap = await transform.getSubCategoryMap(localCategoryMap);
        const all = [], by_akto = [], custom = [];
        

        let id = 1;
        Object.entries(listData).forEach(([key, value]) => {
            const testSuiteSubCategoryMap = [];
            let count = 0;
            value.forEach(cat => {
                if (!subCategoryMap[cat] || !Array.isArray(subCategoryMap[cat]) || subCategoryMap[cat].length === 0) return;
                subCategoryMap[cat].forEach(test => { testSuiteSubCategoryMap.push(test.value) });
            });

            const autoGeneratedTestSuite = {
                tests: testSuiteSubCategoryMap,
                testSuiteName: key,
                name: (<Text variant="headingSm" fontWeight="medium" as="h2">{key}</Text>),
                id: id++,
                testCount: testSuiteSubCategoryMap.length,
                categoriesCovered: (
                    <ShowListInBadge
                        itemsArr={[...value]}
                        maxItems={4}
                        maxWidth={"250px"}
                        status={"new"}
                        itemWidth={"200px"}
                    />
                ),
                isAutoGenerated: true,
            };
            all.push(autoGeneratedTestSuite);
            by_akto.push(autoGeneratedTestSuite);
        });

        const fetchedData = await api.fetchAllTestSuites();
        fetchedData.forEach((testSuiteItem) => {
            const categoriesCoveredList = [];
            const testSet = new Set(testSuiteItem?.subCategoryList||[]);
            Object.entries(subCategoryMap).forEach(([key, value]) => {
                if (value.some(test => testSet.has(test.value))) {
                    categoriesCoveredList.push(key);
                }
            });
            const customTestSuite = {
                tests: testSuiteItem?.subCategoryList||[],
                testSuiteName: testSuiteItem?.name||"",
                name: (<Text variant="headingSm" fontWeight="medium" as="h2">{testSuiteItem?.name||""}</Text>),
                id: testSuiteItem?.id,
                testCount: testSuiteItem?.subCategoryList?.length||0,
                categoriesCovered: (
                    <ShowListInBadge
                        itemsArr={[...categoriesCoveredList]}
                        maxItems={4}
                        maxWidth={"250px"}
                        status={"new"}
                        itemWidth={"200px"}
                    />
                ),
            };
            all.push(customTestSuite);
            custom.push(customTestSuite);
        });
        
        setData({
            all: [...all],
            by_akto: [...by_akto],
            custom: [...custom],
        });

    };

    useEffect(() => {
       fetchData()
    }, [])


    const [tableLoading, setTableLoading] = useState(false)
    const handleSelectedTab = (selectedIndex) => {
        setTableLoading(true)
        setSelected(selectedIndex)
        setTimeout(() => {
            setTableLoading(false)
        }, 200)
    }

    const getActions = (item) => {
        return [{
            items: [
                item.isAutoGenerated ? null : {
                    content: 'Delete',
                    onAction: () => {
                        api.deleteTestSuite(item.id).then(() => {
                            func.setToast(true, false, "Test suite deleted successfully")
                            fetchData();
                        }
                        ).catch((error) => {
                            func.setToast(true, true, "Failed to delete test suite. Please try again.");
                        });
                    },
                    destructive: true
                }].filter(Boolean)
        }]
    }

    const components = [
        <GithubSimpleTable
            sortOptions={sortOptions}
            tableTabs={tableTabs}
            loading={tableLoading}
            selected={selected}
            mode={IndexFiltersMode.Default}
            onSelect={handleSelectedTab}
            onRowClick={handleRowClick}
            resourceName={resourceName}
            useNewRow={true}
            headers={headers}
            headings={headings}
            data={data[selectedTab]}
            getActions={getActions}
            hasRowActions={true}
        />,

        <FlyLayoutSuite
            selectedTestSuite={selectedTestSuite}
            setSelectedTestSuite={setSelectedTestSuite}
            show={show}
            setShow={setShow}
            localSubCategoryMap={localSubCategoryMap}
            fetchTableData={fetchData}
            createNewMode={createNewMode}
            setCreateNewMode={setCreateNewMode}
        />

    ]

    return (
        <PageWithMultipleCards
            title={
                <TitleWithInfo
                    tooltipContent={"Create or manage custom test suites by combining tests across categories for simplified test execution and reusability."}
                    titleText={"Test Suites"}
                    docsUrl={"https://docs.akto.io/api-security-testing/concepts/test"}
                />
            }
            components={components}
            primaryAction={<Button onClick={()=>{setShow(true); setSelectedTestSuite(null); setCreateNewMode(true)}} primary>Create New</Button>}
        >

        </PageWithMultipleCards>
    )

}

export default TestSuite