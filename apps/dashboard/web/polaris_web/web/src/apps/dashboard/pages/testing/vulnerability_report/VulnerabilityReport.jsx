import { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import { usePDF } from 'react-to-pdf';
import PersistStore from '@/apps/main/PersistStore';
import api from '../api';
import GithubSimpleTable from "@/apps/dashboard/components/tables/GithubSimpleTable";
import { CellType } from "@/apps/dashboard/components/tables/rows/GithubRow"
import { Avatar, Badge, Box, Divider, Frame, HorizontalStack, Text, TopBar, VerticalStack } from '@shopify/polaris';
import './styles.css'


function Issue({ issueDetails, index }) {
    console.log(issueDetails)

    const category = issueDetails.category
    const testName = category?.testName
    const issueDescription = category?.issueDescription
    const issueImpact = category?.issueImpact

    const vulnerableApisCount = category?.vulnerableTestingRunResults.length
    const vulnerableApis = category?.vulnerableTestingRunResults.map(vulnerableApi => {
        const { url, method } = vulnerableApi.apiInfoKey

        return {
            api: `${method} ${url}`
        }
    })

    const resourceName = {
        singular: 'API',
        plural: 'APIs',
    };


    const apisHeader = `${vulnerableApisCount} ${resourceName.plural} affected`
    const headers = [
        {
            text: apisHeader,
            title: apisHeader,
            value: 'api',
            isText: CellType.TEXT
        }
    ]

    return (
        <div className="issue-container">
            <VerticalStack gap="3">
                <Text variant='headingMd'>
                    { index + 1 }. { testName }
                </Text>

                <Text variant='bodySm' color='subdued'>
                    { issueDescription }
                </Text>

                <GithubSimpleTable
                    key="table"
                    data={vulnerableApis}
                    resourceName={resourceName}
                    headers={headers}
                    useNewRow={true}
                    condensedHeight={true}
                    hideQueryField={true}
                    headings={headers}
                    hidePagination={true}
                />

                <Text variant='headingXs'>
                    Why is this a problem?
                </Text>

                <Text variant='bodySm' color='subdued'>
                    { issueImpact }
                </Text>

                <Divider />
            </VerticalStack>
        </div>
    )
}

function VulnerabilityReport () {
    const { toPDF, targetRef } = usePDF({filename: 'page.pdf'});

    // return (
    //     <div>
    //         <button onClick={() => toPDF()}>Download PDF</button>
    //         <div ref={targetRef}>
    //             Content to be generated to PDF
    //         </div>
    //     </div>
    // )

    const params = useParams();
    const testingRunSummaryId = params.summaryId
    const issuesFilter = params.issuesFilter

    const [vulnerableResultsMap, setVulnerableResultsMap] = useState([]);
    //const [dataToCurlObj, setDataToCurlObj] = useState({});
    const [severitiesCount, setSeveritiesCount] = useState({ HIGH: 0, MEDIUM: 0, LOW: 0 });
    
    const collectionsMap = PersistStore(state => state.collectionsMap)
    const subCategoryMap = PersistStore(state => state.subCategoryMap)

    console.log(vulnerableResultsMap)
    console.log(severitiesCount)
    console.log(collectionsMap)
    console.log(subCategoryMap)

    const createVulnerabilityMap = (testingRunResults) => {
        let testVsVulMap = {}
        let high = 0
        let medium = 0
        let low = 0
        testingRunResults?.length > 0 && testingRunResults.forEach((testingRun) => {
            let subtype = testingRun?.testSubType
            let subCategory = subCategoryMap?.[subtype]
        
            if (!subCategory) {
                return
            }
            let severity = subCategory?.superCategory?.severity?._name
            let severityIndex = 0;
            switch (severity) {
                case 'HIGH':
                    ++high
                    severityIndex = 2
                    break;
                case 'MEDIUM':
                    ++medium
                    severityIndex = 1
                    break;
                case 'LOW':
                    ++low
                    severityIndex = 0
                    break;
                default:
                    break;
            }

            let vulnerabilities = testVsVulMap[subtype]
            if (vulnerabilities === undefined) {
                vulnerabilities = JSON.parse(JSON.stringify(subCategory))
            }
            let vulnerableTestingRunResults = vulnerabilities["vulnerableTestingRunResults"]
            if (vulnerableTestingRunResults === undefined) {
                vulnerableTestingRunResults = []
            }
            vulnerableTestingRunResults.push(testingRun)
            vulnerabilities['vulnerableTestingRunResults'] = vulnerableTestingRunResults
            vulnerabilities['severityIndex'] = severityIndex
            testVsVulMap[subtype] = vulnerabilities
        })
        setSeveritiesCount({ HIGH: high, MEDIUM: medium, LOW: low });
        let localCopy = vulnerableResultsMap
        Object.keys(testVsVulMap).forEach((category) => {
            let obj = testVsVulMap[category]
            localCopy.push({ category: obj })
        })

        let compare = function (a, b) {
            let severityA = a[Object.keys(a)[0]]['severityIndex']
            let severityB = b[Object.keys(a)[0]]['severityIndex']
            return severityB - severityA
        }
        localCopy.sort(compare)
        setVulnerableResultsMap(localCopy)
    }

    const fetchVulnerableData = async () => {
        let resultsCount = 0;
        let vulnerableTestingRunResults = []
        //let sampleDataVsCurlMap = {}

        if (testingRunSummaryId) {
            while (true) {
                let testingRunCountsFromDB = 0
                await api.fetchVulnerableTestingRunResults(testingRunSummaryId, resultsCount).then((resp) => {
                    vulnerableTestingRunResults = [...vulnerableTestingRunResults, ...resp.testingRunResults]
                    testingRunCountsFromDB = resp.testingRunResults.length
                    //sampleDataVsCurlMap = { ...sampleDataVsCurlMap, ...resp.sampleDataVsCurlMap }
                })
                resultsCount += 50
                if (testingRunCountsFromDB < 50) {
                    //EOF: break as no further documents exists
                    break
                }
            }
        } else if (issuesFilter) {
            while (true) {
                let testingRunCountsFromDB = 0
                let filters = JSON.parse(atob(issuesFilter))
                await issuesApi.fetchVulnerableTestingRunResultsFromIssues(filters, resultsCount).then(resp => {
                    vulnerableTestingRunResults = [...vulnerableTestingRunResults, ...resp.testingRunResults]
                    testingRunCountsFromDB = resp.totalIssuesCount
                    //sampleDataVsCurlMap = { ...sampleDataVsCurlMap, ...resp.sampleDataVsCurlMap }
                })
                resultsCount += 50
                if (testingRunCountsFromDB < 50 || resultsCount >= 1000) {
                    //EOF: break as no further documents exists
                    break
                }
            }
        }
        //setDataToCurlObj(sampleDataVsCurlMap)
        createVulnerabilityMap(vulnerableTestingRunResults)
    }

    useEffect(() => {
        fetchVulnerableData()
    }, [])

    const headerComp = (
        <div className="header-css">
            <Box width="60%">
                <HorizontalStack align="space-between">
                    <Box paddingBlockStart={3}>
                        <Avatar size="medium" shape="square" source="/public/akto_colored.svg" customer name='aktoLogo' />
                    </Box>
                    <Text variant="headingXl">Akto Vulnerabilities Report</Text>
                    <button onClick={() => toPDF()}>Download PDF</button>
                </HorizontalStack>
            </Box>
        </div>
    )
    const headerEditor = (
        <TopBar secondaryMenu={headerComp} />
    )

    return (
        <div>
            <Frame topBar={headerEditor}>
                <div ref={targetRef} id="report-container">
                        <Box background="bg">
                            {vulnerableResultsMap.map((issueDetails, index) => {
                                return (
                                    <Issue key={index} issueDetails={issueDetails} index={index} />
                                )
                            })}
                        </Box>
                </div>
            </Frame>
        </div>
    )
}

export default VulnerabilityReport;