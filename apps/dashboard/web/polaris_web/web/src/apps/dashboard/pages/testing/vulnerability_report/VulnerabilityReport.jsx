import { useEffect, useRef, useState } from 'react';
import { useParams } from 'react-router-dom';
import { usePDF } from 'react-to-pdf';
import PersistStore from '@/apps/main/PersistStore';
import api from '../api';
import GithubSimpleTable from "@/apps/dashboard/components/tables/GithubSimpleTable";
import SpinnerCentered from "@/apps/dashboard/components/progress/SpinnerCentered";
import { CellType } from "@/apps/dashboard/components/tables/rows/GithubRow"
import { Avatar, Badge, Box, Button, DataTable, Divider, Frame, HorizontalGrid, HorizontalStack, Link, Text, TopBar, VerticalStack } from '@shopify/polaris';
import './styles.css'
import GetPrettifyEndpoint from '@/apps/dashboard/pages/observe/GetPrettifyEndpoint';
import func from "@/util/func";
import HighchartsReact from 'highcharts-react-official';
import Highcharts from "highcharts"
import html2pdf from 'html2pdf.js';

function IssuesGraph({ categoryIssues }) {

    const issuesGraphRef = useRef(null)

    let dataArr = [] ;
    Object.values(categoryIssues).forEach((issuesList)=>{
        dataArr.push(issuesList.length)
    })

    const issuesGraphOptions = {
        chart: {
            type: 'column',
            height: '280px',
            spacing: [5, 0, 0, 0],
        },
        credits: {
            enabled: false,
        },
        title: {
            text: '',
            align: 'left',
            margin: 20
        },
        xAxis: {
            categories: Object.keys(categoryIssues),
            crosshair: true,
            accessibility: {
                description: 'Categories'
            }
        },
        yAxis: {
            min: 0,
            title: {
                text: 'Number of issues'
            }
        },
        legend: {
            enabled: false
        },
        series: {
            minPointLength: 0,
            pointWidth: 40,
            color: "#FDA29B",
            cursor: 'pointer',
            data: dataArr
        }
    }

    return (
        <Box>
            <Text variant="headingXs">Number of issues</Text>
            <br/>
            <HighchartsReact
                highcharts={Highcharts}
                options={issuesGraphOptions}
                ref={issuesGraphRef}
            />
        </Box>
    )
}

function Category({ index, categoryName, categoryIssues, categoryMap, categoryVsApisCountMap }) {

    const categoryDisplayName = categoryMap && categoryMap[categoryName].displayName

    const categorySummaryItems = [
        {
            title: "Total issues",
            data: categoryIssues.length,
        }, 
        {
            title: "APIs affected",
            data: categoryVsApisCountMap[categoryName]
        }
    ]

    return (
        <div className='category-container'>
            <a name={categoryName}></a>
            <VerticalStack gap="3">
                <Text variant='headingMd'>
                    2.{index + 1} {categoryDisplayName}
                </Text>

                <ReportSummaryInfoCard summaryItems={categorySummaryItems} />

                <Text variant='headingSm'>
                    Issues
                </Text>

                <VerticalStack gap="2">
                    {categoryIssues.length > 0 && categoryIssues.map((issueDetails, index) => {
                        const name = issueDetails?.name
                        const testName = issueDetails?.testName
                        return (
                            <Link key={index} url={`#${name}`} removeUnderline>
                                <Text variant='bodySm' color='subdued'>
                                    {index + 1}. {testName}
                                </Text>
                            </Link>
                        )
                    })}
                </VerticalStack>
                <Divider />
                <div className="html2pdf__page-break"></div>

                <div>
                    {categoryIssues.map((issueDetails, index) => {
                        return (
                            <Issue key={index} issueDetails={issueDetails} index={index} isLast={index === categoryIssues.length - 1}/>
                        )
                    })}
                </div>

            </VerticalStack>
        </div>
    )
}

function Issue({ index, issueDetails, isLast }) {
    const [vulnerableApisState, setVulnerableApisState] = useState([])

    const removeTrailingQuotes = (str) => {
        return str.replace(/['"]+/g, '')
    }

    const getTestResultLink = () => {
        if (issueDetails.vulnerableTestingRunResults.length === 0) {
            return ''
        }

        const firstVulnerableApi = issueDetails.vulnerableTestingRunResults[0]
        const testRunResultSummaryHexId = firstVulnerableApi.testRunHexId
        const testRunId = firstVulnerableApi.hexId  

        return `/dashboard/testing/${testRunResultSummaryHexId}/result/${testRunId}`
    }
    const testResultLink = getTestResultLink()

    const name = issueDetails?.name
    const testName = issueDetails?.testName
    const issueDescription = removeTrailingQuotes(issueDetails?.issueDescription)
    const issueImpact = removeTrailingQuotes(issueDetails?.issueImpact)

    const vulnerableApisCount = issueDetails?.vulnerableTestingRunResults.length
    
    const resourceName = {
        singular: 'API',
        plural: 'APIs',
    };

    const apisHeader = (
             <HorizontalStack align="space-between">
                <Text variant="headingXS" fontWeight='bold'>{vulnerableApisCount} {vulnerableApisCount === 1 ? resourceName.singular : resourceName.plural} affected</Text>
                <Link url={testResultLink} removeUnderline target="_blank">
                    <Text variant='bodyMd'>See in akto</Text>
                </Link>   
            </HorizontalStack>
       
    )
    const headers = [
        {
            text: apisHeader,
            title: apisHeader,
            value: 'apiDetails',
            textValue: 'apiDetailsText'
        }
    ]

    useEffect(() => {
        let vulnerableApis = issueDetails?.vulnerableTestingRunResults.map(vulnerableApi => {
            const { url, method } = vulnerableApi.apiInfoKey
    
            const apiDetails = (
                <GetPrettifyEndpoint method={method} url={url} isNew={false} />            
            )
    
            return {
                apiDetailsText: `${method} ${url}`,
                apiDetails: apiDetails,
            }
        })

        const VULNERABLE_APIS_LIMIT = 5
  
        if (vulnerableApis.length > VULNERABLE_APIS_LIMIT) {
            const moreApisText = `+${vulnerableApis.length - VULNERABLE_APIS_LIMIT} more`
            vulnerableApis = vulnerableApis.slice(0, VULNERABLE_APIS_LIMIT)

            vulnerableApis.push({
                apiDetailsText: "+more",
                apiDetails: <Text variant='bodyMd'>{moreApisText}</Text>
            })
        }
    
        setVulnerableApisState(vulnerableApis)
    }, [])

    return (
        <div className="issue-container">
            <a name={name}></a>
            <VerticalStack gap="3">
                <Text variant='headingSm'>
                    {index + 1}. {testName}
                </Text>

                <Text variant='bodySm' color='subdued'>
                    {issueDescription}
                </Text>

                <GithubSimpleTable
                    key="table"
                    data={vulnerableApisState}
                    resourceName={resourceName}
                    headers={headers}
                    useNewRow={true}
                    condensedHeight={true}
                    hideQueryField={true}
                    headings={headers}
                    hidePagination={true}
                />

                <Text variant='headingXs'>
                    Why is this a problem?
                </Text>

                <Text variant='bodySm' color='subdued'>
                    {issueImpact}
                </Text>

                {!isLast ? (
                    <div>
                        <Divider />
                        <div className="html2pdf__page-break"></div>
                    </div>) : null}
            </VerticalStack>
        </div>
    )
}


function ReportSummaryInfoCard({ summaryItems}) {

    return (
        <table style={{ width: "100%", borderCollapse: "collapse" }}> 
            <tr>
                {summaryItems.map((item, index) => {
                    return (
                        <td key={index} style={{ border: "1px solid #DADDDF"}}>
                            <Box padding="2">   
                                <VerticalStack gap="2">
                                    <Text variant='headingXs'>{item.title}</Text>
                                    {item?.isComp ? item.data : <Text variant='headingLg'>{item.data}</Text>}
                                </VerticalStack>
                            </Box>
                        </td>
                    )
                })}
            </tr>
        </table>
    )
}

function VulnerabilityReport() {
    const pdfRef = useRef();
    const { toPDF, targetRef } = usePDF({ filename: 'akto_api_security_findings.pdf' });

    const params = useParams();
    const testingRunSummaryId = params.summaryId
    const issuesFilter = params.issuesFilter

    const [ loading, setLoading ] = useState(true)

    const [vulnerableResultsMap, setVulnerableResultsMap] = useState([]);
    const [severitiesCount, setSeveritiesCount] = useState({ HIGH: 0, MEDIUM: 0, LOW: 0 });
    const [categoryVsIssuesMap, setCategoryVsIssuesMap] = useState({})
    const [categoryVsApisCountMap, setCategoryVsApisCountMap] = useState({})
    const [aktoFindingsTableData, setAktoFindingsTableData] = useState([])

    const collectionsMap = PersistStore(state => state.collectionsMap)
    const subCategoryMap = PersistStore(state => state.subCategoryMap)
    const categoryMap = PersistStore(state => state.categoryMap)

    const createVulnerabilityMap = (testingRunResults) => {
        let categoryVsIssuesMap = {}
        let categoryVsApisCountMap = {}
        let issueVsVulMap = {}
        let aktoFindingsTableData = []
        let high = 0
        let medium = 0
        let low = 0
        testingRunResults?.length > 0 && testingRunResults.forEach((testingRun) => {
            let testSubtype = testingRun?.testSubType
            let testInfo = subCategoryMap?.[testSubtype]

            if (!testInfo) {
                return
            }
            let severity = testInfo?.superCategory?.severity?._name
            let severityIndex = 0;
            switch (severity) {
                case 'HIGH':
                    ++high
                    severityIndex = 2
                    break;
                case 'MEDIUM':
                    ++medium
                    severityIndex = 1
                    break;
                case 'LOW':
                    ++low
                    severityIndex = 0
                    break;
                default:
                    break;
            }

            let vulnerabilities = issueVsVulMap[testSubtype]
            if (vulnerabilities === undefined) {
                vulnerabilities = JSON.parse(JSON.stringify(testInfo))
            }
            let vulnerableTestingRunResults = vulnerabilities["vulnerableTestingRunResults"]
            if (vulnerableTestingRunResults === undefined) {
                vulnerableTestingRunResults = []
            }
            vulnerableTestingRunResults.push(testingRun)
            vulnerabilities['vulnerableTestingRunResults'] = vulnerableTestingRunResults
            vulnerabilities['severityIndex'] = severityIndex
            issueVsVulMap[testSubtype] = vulnerabilities
        })
        setSeveritiesCount({ HIGH: high, MEDIUM: medium, LOW: low });

        let localCopy = vulnerableResultsMap
        Object.keys(issueVsVulMap).forEach((testSubtype) => {
            let obj = issueVsVulMap[testSubtype]
            localCopy.push({ category: obj })
        })

        for (const [testSubType, issue] of Object.entries(issueVsVulMap)) {
            const categoryName = issue.superCategory.name

            if (!categoryName) {
                continue
            }

            let issuesList
            if (!categoryVsIssuesMap.hasOwnProperty(categoryName)) {
                issuesList = []
                categoryVsIssuesMap[categoryName] = issuesList
            } else {
                issuesList = categoryVsIssuesMap[categoryName]
            }

            issuesList.push(issue)

            let apisCount = 0
            if (!categoryVsApisCountMap.hasOwnProperty(categoryName)) {
                categoryVsApisCountMap[categoryName] = 0
            } else {
                apisCount = categoryVsApisCountMap[categoryName]
            }

            apisCount += issue.vulnerableTestingRunResults.length
            categoryVsApisCountMap[categoryName] = apisCount
        }

        Object.keys(categoryVsIssuesMap).forEach((categoryName, index) => {
            const categoryDetails = categoryMap[categoryName]
            
            aktoFindingsTableData.push({
                sno: index + 1,
                categoryDisplayName: categoryDetails.displayName,
                categoryDisplayNameComp: (
                    <Link onClick={(e) =>e.stopPropagation()} url={`#${categoryName}`} removeUnderline>
                        <Text variant='bodyMd' color='subdued'>
                            {categoryDetails.displayName}
                        </Text>
                    </Link>
                ),
                apisAffected: categoryVsApisCountMap[categoryName],
                categorySeverity: categoryDetails.severity._name,
                categorySeverityComp: <Badge size="small" status={func.getTestResultStatus(categoryDetails.severity._name)}>{categoryDetails.severity._name}</Badge>
            })
        })
        
        setCategoryVsIssuesMap(categoryVsIssuesMap)
        setCategoryVsApisCountMap(categoryVsApisCountMap)
        setVulnerableResultsMap(localCopy)
        setAktoFindingsTableData(aktoFindingsTableData)
    }

    const fetchVulnerableData = async () => {
        let resultsCount = 0;
        let vulnerableTestingRunResults = []
        //let sampleDataVsCurlMap = {}

        if (testingRunSummaryId) {
            while (true) {
                let testingRunCountsFromDB = 0
                await api.fetchVulnerableTestingRunResults(testingRunSummaryId, resultsCount).then((resp) => {
                    vulnerableTestingRunResults = [...vulnerableTestingRunResults, ...resp.testingRunResults]
                    testingRunCountsFromDB = resp.testingRunResults.length
                    //sampleDataVsCurlMap = { ...sampleDataVsCurlMap, ...resp.sampleDataVsCurlMap }
                })
                resultsCount += 50
                if (testingRunCountsFromDB < 50) {
                    //EOF: break as no further documents exists
                    break
                }
            }
        } else if (issuesFilter) {
            while (true) {
                let testingRunCountsFromDB = 0
                let filters = JSON.parse(atob(issuesFilter))
                await issuesApi.fetchVulnerableTestingRunResultsFromIssues(filters, resultsCount).then(resp => {
                    vulnerableTestingRunResults = [...vulnerableTestingRunResults, ...resp.testingRunResults]
                    testingRunCountsFromDB = resp.totalIssuesCount
                    //sampleDataVsCurlMap = { ...sampleDataVsCurlMap, ...resp.sampleDataVsCurlMap }
                })
                resultsCount += 50
                if (testingRunCountsFromDB < 50 || resultsCount >= 1000) {
                    //EOF: break as no further documents exists
                    break
                }
            }
        }
        //setDataToCurlObj(sampleDataVsCurlMap)
        createVulnerabilityMap(vulnerableTestingRunResults)
    }

    useEffect(() => {
        setLoading(true)
        fetchVulnerableData()
        setLoading(false)
    }, [])

    function getDaySuffix(day) {
        if (day > 3 && day < 21) return 'th';
        switch (day % 10) {
            case 1: return 'st';
            case 2: return 'nd';
            case 3: return 'rd';
            default: return 'th';
        }
    }
    function formatDate(date) {
        const day = date.getDate();
        const month = date.toLocaleString('default', { month: 'long' });
        const year = date.getFullYear();
        const daySuffix = getDaySuffix(day);
        return `${day}${daySuffix} ${month}, ${year}`;
    }
    
    const currentDate = formatDate(new Date());
    const handleDownloadPDF = () => {
        console.log("Before download")
        //toPDF()
    
        // Clone the element
        const originalElement = pdfRef.current;
        const clonedElement = originalElement.cloneNode(true);

        // Apply PDF-specific styles to the cloned element
        clonedElement.style.margin = 'auto';
        clonedElement.style.maxWidth = '100%';

        // Append the cloned element to the body
        document.body.appendChild(clonedElement);

        const opt = {
            margin: 0.5,
            filename: 'report.pdf',
            image: { type: 'jpeg', quality: 0.98 },
            html2canvas: { scale: 2, useCORS: true },
            jsPDF: { unit: 'in', format: 'letter', orientation: 'portrait' },
            enableLinks: true,
        };

        html2pdf().set(opt).from(clonedElement).save().then(() => {
            // Remove the cloned element after PDF generation
            document.body.removeChild(clonedElement);
        });
        
        console.log("after download")
    }
    const reportSecondaryMenu = (
        <div className="header-css" id="report-secondary-menu-container">
            <Box width="100%">
                <HorizontalStack align="space-between">
                    <VerticalStack>
                        <Text variant="headingXs">API Security Findings</Text> 
                        <Text variant="bodySm">{currentDate}</Text>
                    </VerticalStack>
                    <div style={{ display: 'flex', alignItems: 'center' }}>
                        <Button primary onClick={() => handleDownloadPDF()}>Download</Button>
                        <img src='/public/white_logo.svg' alt="Logo" className='top-bar-logo' />
                    </div>
                </HorizontalStack>
            </Box>
        </div>
    )

    // Table of contents
    const aktoFindingsChildren = []
    Object.keys(categoryVsIssuesMap).forEach((categoryName, index) => {
        const categoryDetails = categoryMap[categoryName]
        aktoFindingsChildren.push({
            text: categoryDetails.displayName,
            link: categoryName,
            children: null,
        })
    })
    const tocList = [
        { text: "Report summary", link: "report-summary", children: null },
        { text: "Akto findings", link: "akto-findings", children: aktoFindingsChildren },
    ]

    // Akto findings table
    const aktoFindingsTableResourceName = {
        singular: 'Akto finding',
        plural: 'Akto findings',
    };

    const aktoFindingsTableHeaders = [
        {
            title: "S.No.",
            value: "sno",
            type: CellType.TEXT
        }, 
        {
            title: "Issue catgory",
            value: "categoryDisplayNameComp",
            textValue: "categoryDisplayName",
        },
        {
            title: "APIs affcted",
            value: "apisAffected",
            type: CellType.TEXT
        },
        {
            title: "Severity",
            value: "categorySeverityComp",
            textValue: "categorySeverity",
        }
    ]

    const reportTopBar = (
        <TopBar secondaryMenu={reportSecondaryMenu} />
    )

    // Report summary
    let totalIssues = 0, apisAffected = 0
    Object.values(categoryVsIssuesMap).forEach(categoryIssuesList => {
        totalIssues += categoryIssuesList.length
    })
    Object.values(categoryVsApisCountMap).forEach(apisCount => {
        apisAffected += apisCount
    })

    const reportSummaryItems = [
        {
            title: "Total issues",
            data: totalIssues,
        }, 
        {
            title: "Severity",
            data: (
                <Box>
                    <HorizontalGrid columns={3} gap={1}>
                        <Box key="high" borderInlineEndWidth={1} paddingBlockStart={1} paddingBlockEnd={1} borderColor="border-subdued">
                            <div style={{ color: "#D72C0D" }}>
                                <Text variant="headingLg">{severitiesCount?.HIGH} High</Text>
                            </div>
                        </Box>
                        <Box key="medium" borderInlineEndWidth={1} paddingBlockStart={1} paddingBlockEnd={1} borderColor="border-subdued">
                            <div style={{ color: "#916A00" }}>
                                <Text variant="headingLg">{severitiesCount?.MEDIUM} Medium</Text>
                            </div>
                        </Box>
                        <Box key="low" borderInlineEndWidth={0} paddingBlockStart={1} paddingBlockEnd={1} borderColor="border-subdued">
                            <div style={{ color: "#2C6ECB" }}>
                                <Text variant="headingLg">{severitiesCount?.LOW} Low</Text>
                            </div>
                        </Box>
                    </HorizontalGrid>
                </Box>

               
            ),
            isComp: true
        }, 
        {
            title: "APIs affected",
            data: apisAffected
        }
    ]

    return (
        <div>
            <style>
                {`
                    html {
                        scroll-padding-top: 85px; /* Adjust based on the height of your topbar */
                    }
                `}
            </style>
            <Frame topBar={reportTopBar}>
                { loading === false ? 
                    (<div ref={pdfRef} id="report-container">
                        <Box background="bg">
                            <div className='report-cover-page-container'>
                                <img src='/public/vulnerability_header.png' alt="Header Image" className='report-cover-page'/>
                                <img src='/public/white_logo.svg' alt='akt-logo' className='report-akto-logo'></img>
                                <div className='report-cover-page-content'>
                                    <Box width="100%">
                                        <HorizontalStack align="space-between">
                                            <VerticalStack gap={'5'}>
                                                <Text variant="bodyLg">Vulnerability Report</Text>
                                                <div className="heading-text">
                                                    <Text variant="heading4xl">Org1 API Security Findings</Text>
                                                </div>
                                                <Text variant="bodyMd">{currentDate}</Text>
                                            </VerticalStack>
                                        </HorizontalStack>
                                    </Box>
                                </div>
                            </div>
    
                            <div id="toc">
                                <VerticalStack gap="3">
                                    <Text variant="headingLg">Table of contents</Text>
                                    <VerticalStack gap="2">
                                        {tocList.map((tocEntry, index) => {
                                            return (
                                                <div key={index} className='toc-entry-container'>
                                                    <Link key={index} url={`#${tocEntry.link}`} removeUnderline>
                                                        <Text variant='bodyMd' color='subdued'>
                                                            {index + 1}. {tocEntry.text}
                                                        </Text>
                                                    </Link>
    
                                                    <div className='toc-children-container'>
                                                        <VerticalStack gap="3">
                                                            {tocEntry.children && tocEntry.children.map((child, index) => {
                                                                return (
                                                                    <Link key={index} url={`#${child.link}`} removeUnderline>
                                                                        <Text variant='bodyMd' color='subdued'>
                                                                            {index + 1}. {child.text}
                                                                        </Text>
                                                                    </Link>
                                                                )
                                                            })}
                                                        </VerticalStack>
                                                    </div>
                                                </div>
                                            )
                                        })}
                                    </VerticalStack>
                                </VerticalStack>
                            </div>
                            <Divider />
    
                            <div id="report-summary">
                                <a name="report-summary"></a>
                                <VerticalStack gap="4">
                                    <Text variant="headingLg">1. Report summary</Text>
                                    <ReportSummaryInfoCard summaryItems={reportSummaryItems} />
                                    <IssuesGraph categoryIssues={categoryVsIssuesMap}/>
                                </VerticalStack>
                            </div>
                            <Divider />
                            <div className="html2pdf__page-break"></div>
    
                            <div id="findings-table">
                                <a name="akto-findings"></a>
                                <VerticalStack gap="3">
                                    <Text variant="headingLg">2. Akto findings</Text>
                                    <GithubSimpleTable
                                        key="table"
                                        data={aktoFindingsTableData}
                                        resourceName={aktoFindingsTableResourceName}
                                        headers={aktoFindingsTableHeaders}
                                        useNewRow={true}
                                        condensedHeight={true}
                                        hideQueryField={true}
                                        headings={aktoFindingsTableHeaders}
                                        hidePagination={true}
                                    />
                                </VerticalStack>
                            </div>
                            <Divider />
    
                            {Object.keys(categoryVsIssuesMap).length > 0 && Object.keys(categoryVsIssuesMap).map((categoryName, index) => {
                                return (
                                    <div>
                                        <Category
                                            key={index}
                                            index={index}
                                            categoryName={categoryName}
                                            categoryIssues={categoryVsIssuesMap[categoryName]}
                                            categoryMap={categoryMap}
                                            categoryVsApisCountMap={categoryVsApisCountMap}
                                        />
                                        {index !== categoryVsIssuesMap.length - 1 ? (
                                            <div>
                                                <Divider />
                                                <div className="html2pdf__page-break"></div>
                                            </div>
                                        ) : null}
                                    </div>
                                )
                            })}
                            <div className='report-end-image-container'>
                                <img src="/public/vulnerability_footer.png" alt="Footer Image" className='report-end-image'/>
                                <div className='report-end-image-text'>The end.</div>
                            </div>
                        </Box>
                    </div>
                ) : null}
            </Frame>
        </div>
    )
    
}

export default VulnerabilityReport;