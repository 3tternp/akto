import { Badge, Box, Button, Divider, Frame, HorizontalStack, Link, List, Text, TopBar, VerticalStack } from '@shopify/polaris'
import React, { useEffect, useRef } from 'react'
import api from '../api'
import issuesApi from '@/apps/dashboard/pages/issues/api'
import func from '@/util/func'
import { useState } from 'react'
import "./styles.css"
import ReportTOC from './ReportTOC'
import { useParams } from 'react-router-dom'
import ReportRecommendations from './ReportRecommendations'
import ReportSummaryInfoCard from './ReportSummaryInfoCard'
import BarGraph from '../../../components/charts/BarGraph'
import GithubSimpleTable from '../../../components/tables/GithubSimpleTable'
import { CellType } from '../../../components/tables/rows/GithubRow'
import Category from './Category'
import ChartypeComponent from '../TestRunsPage/ChartypeComponent'
import transform from '../transform';

// Akto findings table
const aktoFindingsTableResourceName = {
    singular: 'Akto finding',
    plural: 'Akto findings',
}

const aktoFindingsTableHeaders = [
    {
        title: "S.No.",
        value: "sno",
        type: CellType.TEXT,
        boxWidth: '15px'
    },
    {
        title: "Issue",
        value: "issueNameComp",
        textValue: "issueName",
        boxWidth: '100px'
    },
    {
        title: "Issue description",
        value: "issueDescriptionComp",
        textValue: "issueDescription",
        boxWidth: '200px'
    },
    {
        title: "APIs affcted",
        value: "apisAffected",
        type: CellType.TEXT,
        boxWidth: '15px'
    },
    {
        title: "Issue Category",
        value: "issueCategoryComp",
        textValue: "issueCategory",
        boxWidth: '80px'
    },
    {
        title: "Impact",
        value: "issueImpactComp",
        textValue: "issueImpact",
        type: CellType.TEXT,
    }
]

const VulnerabilityReport = () => {
    const [loading, setLoading] = useState(true)
    const [pdfDownloadEnabled, setPdfDownloadEnabled] = useState(false)
    const [categoryVsIssuesMap, setCategoryVsIssuesMap] = useState({})
    const [categoryMap, setCategoryMap] = useState({})
    const [severitiesCount, setSeveritiesCount] = useState({ HIGH: 0, MEDIUM: 0, LOW: 0 })
    const [categoryVsApisCountMap, setCategoryVsApisCountMap] = useState({})
    const [aktoFindingsTableData, setAktoFindingsTableData] = useState([])
    const [ aktoRecommendations, setAktoRecommendations ] = useState([])
    const [graphData, setGraphData] = useState([])
    const [totalIssues, setTotalIssues] = useState(0)
    const [severityMap, setSeverityMap] = useState({})
    const [startTime, setStartTime] = useState(0)
    const [endTime, setEndTime] = useState(0)
    const [totalApisTested, setTotalApisTested] = useState(0)

    const pdfRef = useRef()
    const params = useParams()
    const testingRunSummaryId = params.summaryId
    const issuesFilter = params.issuesFilter

    const nextStepItems = [
        {
            title: "Prioritized Remediation",
            content: ["Address identified high-risk vulnerabilities first", "Implement suggested security controls", "Conduct follow-up testing to verify fixes"]
        },
        {
            title: "Ongoing Security Measures",
            content: ["Enable continuous API security monitoring", "Integrate security testing into your CI/CD pipeline", "Track and monitor sensitive data exposure", "Maintain an up-to-date API inventory"]
        }
    ]

    const organizationName = func.capitalizeFirstLetter(window.ACCOUNT_NAME || "")
    const currentDate = func.formatReportDate(new Date())
    const userName = func.capitalizeFirstLetter(window.USER_NAME.split('@')[0] || "")

    const aktoFindingsChildren = []
    Object.keys(categoryVsIssuesMap).forEach((categoryName, index) => {
        const issuesArr = categoryVsIssuesMap[categoryName]
        issuesArr.map((issue) => {
            aktoFindingsChildren.push({
                text: issue.testName,
                link: issue.testName,
                children: null,
            })
        })
    })

    const tocList = [
        { text: "Report summary", link: "report-summary", children: null },
        { text: "Akto findings for "+organizationName, link: "findings-table", children: aktoFindingsChildren },
        { text: "Conclusion and Next Steps", link: "akto-next-step", children: null },
    ]



    const createVulnerabilityMap = (testingRunResults, categoryMap, subCategoryMap) => {
        let categoryVsIssuesMap = {}
        let categoryVsApisCountMap = {}
        let issueVsVulMap = {}
        let aktoFindingsTableData = []
        let aktoRecommendationsData = []
        let high = 0
        let medium = 0
        let low = 0
        const uniqueApis = new Set()
        testingRunResults?.length > 0 && testingRunResults.forEach((testingRun) => {
            let testSubtype = testingRun?.testSubType
            let testInfo = subCategoryMap?.[testSubtype]

            if (!testInfo) {
                return
            }
            let severity = testInfo?.superCategory?.severity?._name
            let severityIndex = 0;
            switch (severity) {
                case 'HIGH':
                    ++high
                    severityIndex = 2
                    break;
                case 'MEDIUM':
                    ++medium
                    severityIndex = 1
                    break;
                case 'LOW':
                    ++low
                    severityIndex = 0
                    break;
                default:
                    break;
            }

            let vulnerabilities = issueVsVulMap[testSubtype]
            if (vulnerabilities === undefined) {
                vulnerabilities = JSON.parse(JSON.stringify(testInfo))
            }
            let vulnerableTestingRunResults = vulnerabilities["vulnerableTestingRunResults"]
            if (vulnerableTestingRunResults === undefined) {
                vulnerableTestingRunResults = []
            }
            vulnerableTestingRunResults.push(testingRun)
            vulnerabilities['vulnerableTestingRunResults'] = vulnerableTestingRunResults
            vulnerabilities['severityIndex'] = severityIndex
            issueVsVulMap[testSubtype] = vulnerabilities

            const { apiCollectionId, method, url } = testingRun.apiInfoKey
            const apiIdentifier = `${apiCollectionId}-${method}-${url}`
            uniqueApis.add(apiIdentifier)
        })
        setSeveritiesCount({ HIGH: high, MEDIUM: medium, LOW: low });
        let severityMapForIssueCategory = {}
        for (const [testSubType, issue] of Object.entries(issueVsVulMap)) {
            const categoryName = issue.superCategory.name
            const severity = issue?.superCategory?.severity?._name

            if (!categoryName) {
                continue
            }

            let issuesList
            if (!categoryVsIssuesMap.hasOwnProperty(categoryName)) {
                issuesList = []
                categoryVsIssuesMap[categoryName] = issuesList
            } else {
                issuesList = categoryVsIssuesMap[categoryName]
            }

            issuesList.push(issue)

            let apisCount = 0
            if (!categoryVsApisCountMap.hasOwnProperty(categoryName)) {
                categoryVsApisCountMap[categoryName] = 0
            } else {
                apisCount = categoryVsApisCountMap[categoryName]
            }

            if(severityMapForIssueCategory.hasOwnProperty(categoryName)){
                let initialCount = severityMapForIssueCategory[categoryName][severity] || 0
                severityMapForIssueCategory[categoryName][severity] = initialCount + issue?.vulnerableTestingRunResults?.length 
            }else{
                severityMapForIssueCategory[categoryName] = {}
                severityMapForIssueCategory[categoryName][severity] = issue?.vulnerableTestingRunResults?.length 
            }

            apisCount += issue.vulnerableTestingRunResults.length
            categoryVsApisCountMap[categoryName] = apisCount

            //Add to akto recommendation
            if (issue.hasOwnProperty("remediation")) {
                aktoRecommendationsData.push({
                    title: issue.testName,
                    content:  issue.remediation
                })
            }
        }
        let totalTemplates = 0
        let graphArr = []

        const sortedCategories = Object.keys(categoryVsIssuesMap)
        .map(categoryName => ({
            categoryName,
            issueCount: categoryVsIssuesMap[categoryName].length
        }))
        .sort((a, b) => b.issueCount - a.issueCount)

        sortedCategories.slice(0, 5).forEach((categoryData, index) => {
            const { categoryName } = categoryData
            graphArr.push({
                text: categoryName,
                value: categoryVsApisCountMap[categoryName],
                color: '#B6B0FE'
            })
        })

        let issueSno = 1
        Object.keys(categoryVsIssuesMap).forEach((categoryName, index) => {
            const issuesArr = categoryVsIssuesMap[categoryName]
            totalTemplates += issuesArr.length
            issuesArr.forEach((issue, issueIndex) => {
                aktoFindingsTableData.push({
                    key: issueSno,
                    sno: issueSno++,
                    issueNameComp: <Box><Link url={`#${issue.testName}`} removeUnderline><p style={{whiteSpace: 'normal'}}>{issue.testName}</p></Link></Box>,
                    issueName: issue.testName,
                    issueDescriptionComp: <Box><p style={{whiteSpace: 'normal'}}>{(issue.issueDescription.replace(/^"|"$/g, ''))}</p></Box>,
                    issueDescription: issue.issueDescription,
                    apisAffected: issue.vulnerableTestingRunResults.length,
                    issueCategory: issue.superCategory.shortName,
                    issueCategoryComp: <Box><p style={{whiteSpace: 'normal'}}>{issue.superCategory.shortName}</p></Box>,
                    issueImpactComp: <div className={`badge-wrapper-${func.getAktoSeverities().reverse()[issue.severityIndex]}`}>
                                        <Badge size="small" key={issueIndex+'impact'}>{func.getAktoSeverities().reverse()[issue.severityIndex]}</Badge>
                                    </div>,
                    issueImpact: issue.severityIndex,
                })
            })
        })

        const AKTO_RECOMMENDATIONS_LIMIT = 10
        if (aktoRecommendationsData.length > AKTO_RECOMMENDATIONS_LIMIT) {
            aktoRecommendationsData = aktoRecommendationsData.slice(0, AKTO_RECOMMENDATIONS_LIMIT)
        }

        aktoFindingsTableData.sort((a, b) => b.issueImpact - a.issueImpact)
        aktoFindingsTableData.forEach((item, index) => {
            item.sno = index + 1
        })

        setTotalApisTested(uniqueApis.size)
        setTotalIssues(high+low+medium)
        setCategoryMap(categoryMap)
        setCategoryVsIssuesMap(categoryVsIssuesMap)
        setCategoryVsApisCountMap(categoryVsApisCountMap)
        setAktoFindingsTableData(aktoFindingsTableData)
        setAktoRecommendations(aktoRecommendationsData)
        setGraphData(graphArr)
    }

    const fetchSubcategoriesAndCategories = async () => {
        const metaDataObj = await transform.getAllSubcategoriesData(true, "runTests")
        return [metaDataObj.subCategories, metaDataObj.categories]
    }

    const createVulnerableAPIsSeverity = (vulnerableTestingRunResults, categoryMap) => {
        const severityOrder = func.getAktoSeverities().reverse()
        const countMap = {
            CRITICAL: 0,
            HIGH: 0,
            MEDIUM: 0,
            LOW: 0,
        }

        const endpointMap = {}

        vulnerableTestingRunResults.forEach(item => {
            const endpointKey = `${item.apiInfoKey.apiCollectionId}-${item.apiInfoKey.method}-${item.apiInfoKey.url}`
            const highestConfidence = item.testResults.reduce((max, result) => {
              return severityOrder.indexOf(result.confidence) > severityOrder.indexOf(max)
                ? result.confidence
                : max
            }, 'LOW')
            if (!endpointMap[endpointKey] || severityOrder.indexOf(highestConfidence) > severityOrder.indexOf(endpointMap[endpointKey])) {
              endpointMap[endpointKey] = highestConfidence
            }
        })

        Object.values(endpointMap).forEach(severity => {
            if(countMap[severity] !== undefined) {
              countMap[severity]++
            }
        })

        const result = {
            "Critical": {
                "text": countMap.CRITICAL || 0,
                "color": "#E45357",
                "filterKey": "Critical",
            },
            "High": {
                "text": countMap.HIGH || 0,
                "color": "#EF864C",
                "filterKey": "High"
            },
            "Medium": {
                "text": countMap.MEDIUM || 0,
                "color": "#F6C564",
                "filterKey": "Medium"
            },
            "Low": {
                "text": countMap.LOW || 0,
                "color": "#6FD1A6",
                "filterKey": "Low"
            }
        }

        setSeverityMap(result)
    }

    const getMinMaxTimestamps = (data) => {
        let minStart = Number.MAX_VALUE
        let maxEnd = Number.MIN_VALUE

        for(let index = 0; index < data.length; index++) {
            if(minStart > data[index].startTimestamp) {
                minStart = data[index].startTimestamp
            }

            if(maxEnd < data[index].endTimestamp) {
                maxEnd = data[index].endTimestamp
            }
        }

        if(minStart === Number.MAX_VALUE) {
            minStart = 0
        }

        if(maxEnd === Number.MIN_VALUE) {
            maxEnd = 0
        }

        setStartTime(minStart)
        setEndTime(maxEnd)
    }

    const fetchVulnerableData = async () => {
        let resultsCount = 0;
        let vulnerableTestingRunResults = []
        //let sampleDataVsCurlMap = {}
        let allIgnoredTestingRunIssues = []

        if (testingRunSummaryId) {
            await api.fetchIssuesByStatusAndSummaryId(testingRunSummaryId, ["IGNORED", "FIXED"]).then((issues) => {
                allIgnoredTestingRunIssues = issues
            })
            while (true) {
                let testingRunCountsFromDB = 0
                await api.fetchVulnerableTestingRunResults(testingRunSummaryId, resultsCount).then((resp) => {
                    vulnerableTestingRunResults = [...vulnerableTestingRunResults, ...resp.testingRunResults]
                    testingRunCountsFromDB = resp.testingRunResults.length
                    //sampleDataVsCurlMap = { ...sampleDataVsCurlMap, ...resp.sampleDataVsCurlMap }
                })
                resultsCount += 50
                if (testingRunCountsFromDB < 50) {
                    //EOF: break as no further documents exists
                    break
                }
            }
        } else if (issuesFilter) {
            while (true) {
                let testingRunCountsFromDB = 0
                let filters = JSON.parse(atob(issuesFilter))
                await issuesApi.fetchVulnerableTestingRunResultsFromIssues(filters, resultsCount).then(resp => {
                    vulnerableTestingRunResults = [...vulnerableTestingRunResults, ...resp.testingRunResults]
                    testingRunCountsFromDB = resp.totalIssuesCount
                    //sampleDataVsCurlMap = { ...sampleDataVsCurlMap, ...resp.sampleDataVsCurlMap }
                })
                resultsCount += 50
                if (testingRunCountsFromDB < 50 || resultsCount >= 1000) {
                    //EOF: break as no further documents exists
                    break
                }
            }
        }
        //setDataToCurlObj(sampleDataVsCurlMap)

        const updatedTestingRunResults = vulnerableTestingRunResults.filter(testResult => {
            return !allIgnoredTestingRunIssues.some(ignoredIssue => {
                const isSameApiInfoKey = func.deepComparison(testResult.apiInfoKey, ignoredIssue.id.apiInfoKey)
                const isSameSubCategory = testResult.testSubType === ignoredIssue.id.testSubCategory
        
                return isSameApiInfoKey && isSameSubCategory
            })
        })

        vulnerableTestingRunResults = updatedTestingRunResults

        let res = await fetchSubcategoriesAndCategories()
        let subCategories = res[0]
        let categories = res[1]

        let subCategoryMap = {};
        subCategories.forEach((x) => {
            subCategoryMap[x.name] = x;
        });

        let categoryMap = {};
        categories.forEach((category) => {
            categoryMap[category.name] = category;
        });

        getMinMaxTimestamps(vulnerableTestingRunResults)

        createVulnerabilityMap(vulnerableTestingRunResults, categoryMap, subCategoryMap)
        createVulnerableAPIsSeverity(vulnerableTestingRunResults, categoryMap)
    }

    useEffect(() => {
        setLoading(true)
        setPdfDownloadEnabled(false)
        fetchVulnerableData()
        setLoading(false)
        setPdfDownloadEnabled(true)
    }, [])


    const handleDownloadPF = async () => {
        const WAIT_DURATION = 2500, MAX_RETRIES = 15
        const reportUrl = window.location.href
        
        let pdfError = ""
        let status
        let pdf

        setPdfDownloadEnabled(false)

        const progressToastInterval = setInterval(() => {
            func.setToast(true, false, "Report PDF generation in progress. Please wait...")
        }, 1000)

        try {
            // Trigger pdf download
            const startDownloadReponse = await api.downloadReportPDF(null, organizationName, currentDate, reportUrl)
            const reportId = startDownloadReponse?.reportId
            status = startDownloadReponse?.status

            if (reportId !== null && status === "IN_PROGRESS") {
                // Poll for PDF completion
                for(let i = 0; i < MAX_RETRIES; i++) {
                    const pdfPollResponse = await api.downloadReportPDF(reportId, organizationName, currentDate, reportUrl)
                    status = pdfPollResponse?.status

                    if (status === "COMPLETED") {
                        pdf = pdfPollResponse?.pdf
                        break
                    } else if (status === "ERROR") {
                        pdfError = "Failed to download PDF"
                        break
                    }

                    await func.sleep(WAIT_DURATION)

                    func.setToast(true, false, "Report PDF generation in progress. Please wait...")
                }
            } else {
                pdfError = "Failed to start PDF download"
            }
        } catch (err) {
            pdfError = err.message
        }

        clearInterval(progressToastInterval)

        if (status === "COMPLETED") {
            if (pdf === undefined) {
                pdfError = "Failed to download PDF"
            }
            else {
                // Download the PDF
                try {
                    const byteCharacters = atob(pdf);
                    const byteNumbers = new Array(byteCharacters.length);
                    for (let i = 0; i < byteCharacters.length; i++) {
                        byteNumbers[i] = byteCharacters.charCodeAt(i);
                    }
                    const byteArray = new Uint8Array(byteNumbers);
                    const blob = new Blob([byteArray], { type: "application/pdf" });
                    const link = document.createElement("a");
                    link.href = window.URL.createObjectURL(blob);
                    link.setAttribute("download", "akto_security_findings.pdf");
                    document.body.appendChild(link);
                    link.click();
                    func.setToast(true, false, "Report PDF downloaded.")
                } catch (err) {
                    pdfError = err.message
                }
            }  
        }
        
        if (pdfError !== "") {
            func.setToast(true, true, `Error while downloading PDF. Please try again. \nError: ${pdfError}`)
        } 

        setPdfDownloadEnabled(true)
    }

    const reportSecondaryMenu = (
        <div className="report-header-css header-css" id="report-secondary-menu-container">
            <Box width="100%">
                <HorizontalStack align="space-between">
                    <VerticalStack>
                        <Text variant="headingXs">{organizationName} API Security Findings</Text>
                        <Text variant="bodySm">{currentDate}</Text>
                    </VerticalStack>
                    <div style={{ display: 'flex', alignItems: 'center' }}>
                        <Button primary onClick={() => handleDownloadPF()} disabled={!pdfDownloadEnabled}>Download</Button>
                        <img src='/public/white_logo.svg' alt="Logo" className='top-bar-logo' />
                    </div>
                </HorizontalStack>
            </Box>
        </div>
    )

    const reportTopBar = (
        <TopBar secondaryMenu={reportSecondaryMenu} />
    )

    const reportSummaryItems = [
        {
            title: "APIs Tested",
            data: totalApisTested,
        },
        {
            title: "Vulnerable Issues",
            data: totalIssues
        },
        {
            title: "Scan Duration",
            data: func.getTimeTakenByTest(startTime, endTime)
        }
    ]

    let issueNo = 0

    return (
        <Frame topBar={reportTopBar}>
            <div ref={pdfRef} id="report-container">
                <Box background="bg">
                    <div className='report-cover-page-container'>
                        <img src='/public/vul_report_bg.svg' alt="Header Image" className='report-cover-page' />
                        <img src='/public/white_logo.svg' alt='akt-logo' className='report-akto-logo'></img>
                        <div className='report-cover-page-content'>
                            <Box width="100%">
                                <HorizontalStack align="space-between">
                                    <VerticalStack gap={'5'}>
                                        <div className='report-default-heading'>Vulnerability Report</div>
                                        <div className="heading-text">
                                            <Text variant="heading4xl"><span id='organization-name'>{organizationName}</span> API Security Findings</Text>
                                        </div>
                                        <Text variant="bodyMd">On <span className='semibold-subtext-info'>{currentDate}</span> by <span id='username-wrapper' className='semibold-subtext-info'>@{userName}</span></Text>
                                    </VerticalStack>
                                </HorizontalStack>
                            </Box>
                        </div>
                    </div>
                    <ReportTOC tocList={tocList}/>

                    <div className="report-page-break"></div>
                    <Box paddingInlineStart={5} paddingInlineEnd={5}>
                        <Divider />
                    </Box>

                    <Box id="report-summary" paddingBlockStart={6} paddingBlockEnd={6} paddingInlineStart={5} paddingInlineEnd={5}>
                        <VerticalStack gap="4">
                            <Text variant="headingLg">1. Report summary</Text>
                            <VerticalStack gap="3">
                                <Text variant="bodyMd" color='subdued'>
                                    The initial security assessment conducted on {currentDate} focused on evaluating core functionalities of <span id='organization-name'>{organizationName}</span>'s API endpoints. The scan was configured to analyze authentication mechanisms, data validation controls, access management, and potential security misconfigurations to identify vulnerabilities that could impact the application's security posture.
                                </Text>
                                <ReportSummaryInfoCard summaryItems={reportSummaryItems} />

                                <Box width='100%' paddingBlockStart={4} paddingBlockEnd={2}>
                                    <VerticalStack gap={3}>
                                        <Text variant="headingSm">Vulnerable APIs by Severity</Text>

                                        <ChartypeComponent
                                            data={severityMap}
                                            navUrl={""} title={""} isNormal={true} boxHeight={'300px'} chartOnLeft={true} dataTableWidth="450px" boxPadding={0}
                                            pieInnerSize="50%"
                                            chartSize={250}
                                            spaceBetween={'space-evenly'}
                                        />
                                    </VerticalStack>
                                </Box>

                                <Box width='100%' id='bargraph-container' paddingBlockStart={2} paddingBlockEnd={4}>
                                    <VerticalStack gap={3}>
                                        <Text variant="headingSm">Top 5 Categories by issues</Text>

                                        <BarGraph
                                            data={graphData}
                                            areaFillHex="true"
                                            height={"320px"}
                                            showYAxis={true}
                                            yAxisTitle="Number of issues"
                                            barGap={12}
                                            showGridLines={true}
                                            defaultChartOptions={{
                                                "legend": {
                                                    enabled: false
                                                },
                                            }}
                                            xAxisTitle={'Categories'}
                                            barWidth={30}
                                        />
                                    </VerticalStack>
                                </Box>
                            </VerticalStack>
                        </VerticalStack>
                    </Box>

                    <div className="report-page-break"></div>
                    <Box paddingInlineStart={5} paddingInlineEnd={5}>
                        <Divider />
                    </Box>

                    <Box id="findings-table" paddingBlockStart={6} paddingBlockEnd={6} paddingInlineStart={5} paddingInlineEnd={5}>
                        <VerticalStack gap="4">
                            <Text variant="headingLg">2. Akto findings for <span id='organization-name'>{organizationName}</span></Text>
                            <VerticalStack gap="3">
                                <Text variant="bodyMd" color='subdued'>
                                    The security assessment of <span id='organization-name'>{organizationName}</span> revealed several significant vulnerabilities across different security categories. Each identified vulnerability has been thoroughly analyzed to understand its potential impact on the application's security.
                                </Text>
                                <GithubSimpleTable
                                    key="table"
                                    data={aktoFindingsTableData}
                                    resourceName={aktoFindingsTableResourceName}
                                    headers={aktoFindingsTableHeaders}
                                    useNewRow={true}
                                    condensedHeight={true}
                                    hideQueryField={true}
                                    headings={aktoFindingsTableHeaders}
                                    hidePagination={true}
                                    showFooter={false}
                                />

                                <Box paddingBlockStart={4}>
                                    {
                                        Object.keys(categoryVsIssuesMap).length > 0 && Object.keys(categoryVsIssuesMap).map((categoryName, index) => {
                                            const issuesArr = categoryVsIssuesMap[categoryName]
                                            return issuesArr.map((issue, issueIndex) => {
                                                return (
                                                    <Box key={`${categoryName}-${issueIndex}`}>
                                                        <Category
                                                            key={issueNo}
                                                            index={issueNo++}
                                                            issue={issue}
                                                            category={categoryName}
                                                            categoryMap={categoryMap}
                                                            categoryVsApisCountMap={categoryVsApisCountMap}
                                                        />
                                                        {index !== Object.keys(categoryVsIssuesMap).length - 1 || issueIndex !== issuesArr.length - 1 ? <Box paddingBlockStart={4} paddingBlockEnd={4}><Divider /></Box> : null}
                                                    </Box>
                                                )
                                            })
                                        })
                                    }
                                </Box>
                            </VerticalStack>
                        </VerticalStack>
                    </Box>

                    <div className="report-page-break"></div>
                    <Box paddingInlineStart={5} paddingInlineEnd={5}>
                        <Divider />
                    </Box>

                    <Box id="akto-next-step" paddingBlockStart={6} paddingBlockEnd={6} paddingInlineStart={5} paddingInlineEnd={5}>
                        <VerticalStack gap="4">
                            <Text variant="headingLg">3. Conclusion and Next Steps</Text>
                            <VerticalStack gap="3">
                                <Text variant="bodyMd" color='subdued'>
                                    This security assessment was conducted using Akto's continuous API security testing platform, which helped identify various vulnerabilities across your API endpoints. To maintain robust API security moving forward, we recommend:
                                </Text>
                                <VerticalStack>
                                    {nextStepItems.map((item, index) => {
                                        return (
                                            <Box key={index}>
                                                <Text color='subdued'>{index + 1}. {item.title}</Text>
                                                <Box paddingInlineStart={4}>
                                                    {
                                                        item.content.map((item, index) => {
                                                            return (
                                                                <List.Item key={item+index}><span className='subdued-color-text'>{item}</span></List.Item>
                                                            )
                                                        })
                                                    }
                                                </Box>
                                            </Box>
                                        )
                                    })}
                                </VerticalStack>
                                <Text color='subdued'>
                                    Our platform will continue to monitor your APIs for potential security risks and notify your team of any new vulnerabilities through your configured Jira/Slack integrations. Regular automated scans will help ensure sustained security coverage across your API landscape.
                                </Text>
                                <Text color='subdued'>
                                    For detailed remediation support or to discuss these findings further, please reach out to our security team at <Link>support@akto.io</Link>
                                </Text>
                            </VerticalStack>
                        </VerticalStack>
                    </Box>

                    {aktoRecommendations.length !== 0 ?
                        <Box>
                            <div className="report-page-break"></div>
                            <Box paddingInlineStart={5} paddingInlineEnd={5}>
                                <Divider />
                            </Box>
                            <ReportRecommendations
                                title="Akto recommendations"
                                sno="4"
                                itemsList={aktoRecommendations}
                            />
                        </Box>: null
                    }

                    <Box paddingInlineStart={5} paddingInlineEnd={5}>
                        <Divider />
                    </Box>

                    <Box paddingBlockStart={6} paddingBlockEnd={6} paddingInlineStart={5} paddingInlineEnd={5}>
                        <div className='badges-info-container'>
                            <Text color='subdued' alignment='center'>Assessment conducted using Akto's API Security Platform<br/>G2 High Performer in API Security - 2024</Text>
                        </div>

                        <Box width='100%' paddingBlockStart={4}>
                            <HorizontalStack gap={4} align='center'>
                                <VerticalStack gap={2} align='center' inlineAlign='center'>
                                    <Text fontWeight='semibold' color='subdued'>DAST</Text>
                                    <Link url='https://www.g2.com/products/akto/reviews' target='_blank' removeUnderline><img src='/public/g2-badge-2.png' alt="Footer Image" className='g2-badge' /></Link>
                                </VerticalStack>

                                <VerticalStack gap={2} align='center' inlineAlign='center'>
                                    <Text>{"\u2008"}</Text> {/* Invisible character unicode */}
                                    <Link url='https://www.g2.com/products/akto/reviews' target='_blank' removeUnderline><img src='/public/g2-badge-1.png' alt="Footer Image" className='g2-badge' /></Link>
                                </VerticalStack>

                                <VerticalStack gap={2} align='center' inlineAlign='center'>
                                    <Text fontWeight='semibold' color='subdued'>API SECURITY</Text>
                                    <Link url='https://www.g2.com/products/akto/reviews' target='_blank' removeUnderline><img src='/public/g2-badge-2.png' alt="Footer Image" className='g2-badge' /></Link>
                                </VerticalStack>
                            </HorizontalStack>
                        </Box>
                    </Box>

                    <div className='report-end-image-container'>
                        <img src="/public/vul_report_bg.svg" alt="Footer Image" className='report-end-image' />
                        <div className='report-end-image-text'>The End.</div>
                    </div>
                </Box>
            </div>
        </Frame>
    )
}

export default VulnerabilityReport