name: Production

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version for the deployment'
        required: true
      release_version_threat:
        description: 'Release version for the Threat Detection deployment'
        required: false
      skipTests:
        description: 'Do you want to skip unit tests?'
        required: true
        default: 'False'
        type: choice
        options:
          - 'False'
          - 'True'
      dashboard:
        type: boolean
        default: true
        description: Dashboard
      testing:
        type: boolean
        default: true
        description: Testing
      billing:
        type: boolean
        default: true
        description: Billing
      internal:
        type: boolean
        default: true
        description: Internal
      threat_detection:
        type: boolean
        default: false
        description: Threat Detection Client
      threat_detection_backend:
        type: boolean
        default: false
        description: Threat Detection Backend

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"

  build-threat:
    # The type of runner that the job will run on
    runs-on: ubuntu-22.04
    if: ${{ github.event.inputs.threat_detection == 'true' || github.event.inputs.threat_detection_backend == 'true' }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          distribution: "adopt"
          java-version: "8"
          architecture: x64
      - name: Setup Protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "29.2"
      - uses: bufbuild/buf-action@v1
        with:
          setup_only: true

      - name: Create maxmind directory
        run: mkdir -p ./apps/threat-detection-backend/src/main/resources/maxmind
      - name: Download Maxmind Country database
        working-directory: ./apps/threat-detection-backend/src/main/resources/maxmind
        run: |
          wget -O Geo-Country.mmdb https://raw.githubusercontent.com/akto-api-security/tests-library/refs/heads/master/resources/Geo-Country.mmdb

      - name: Create maxmind directory
        run: mkdir -p ./libs/utils/src/main/resources/maxmind
      - name: Download Maxmind Country database
        working-directory: ./libs/utils/src/main/resources/maxmind
        run: |
          wget -O Geo-Country.mmdb https://raw.githubusercontent.com/akto-api-security/tests-library/refs/heads/master/resources/Geo-Country.mmdb

      - name: Run mvn package
        if: ${{github.event.inputs.skipTests == 'False' }}
        run: mvn package -Dakto-image-tag=${{ github.event.inputs.release_version_threat}} -Dakto-build-time=$(eval "date +%s") -Dakto-release-version=${{github.event.inputs.release_version_threat}}
      - name: Run mvn package dangerously
        if: ${{github.event.inputs.skipTests== 'True' }}
        run: mvn package -Dakto-image-tag=${{ github.event.inputs.release_version_threat }} -Dakto-build-time=$(eval "date +%s") -Dakto-release-version=${{github.event.inputs.release_version_threat}} -DskipTests

      - name: DockerHub login
        env:
          DOCKER_USERNAME: ${{secrets.DOCKER_USERNAME}}
          DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
        run: |
          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD

      - name: Build, tag, and push the image to DockerHub
        id: build-image-dockerhub
        env:
          ECR_REGISTRY: aktosecurity
          ECR_REPOSITORY: akto-api-security
          IMAGE_TAG_THREAT: ${{github.event.inputs.release_version_threat}}
        run: |
          docker buildx create --use
          # Build a docker container and push it to DockerHub
          cd apps/dashboard
          if [[ "${{ github.event.inputs.threat_detection}}" == "true" ]]; then
            cd ../threat-detection
            docker buildx build --platform linux/arm64/v8,linux/amd64 -t $ECR_REGISTRY/akto-threat-detection:$IMAGE_TAG_THREAT . --push
          fi

      - name: Configure AWS Credentials for ECR
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: "true"
          registry-type: public

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # --- Docker Scout CVE Scans and Artifact Uploads ---

      # --- Docker Scout Scan for Threat Detection ---
      - name: Run Docker Scout CVE Scan (Threat Detection)
        if: ${{ github.event.inputs.threat_detection == 'true' }}
        run: |
          docker scout cves aktosecurity/akto-threat-detection:${{ github.event.inputs.release_version_threat }} \
            --only-severities critical,high > scout-threat-detection-report.txt || true

      - name: Upload Scout Report (Threat Detection)
        if: ${{ github.event.inputs.threat_detection == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: scout-report-threat-detection
          path: scout-threat-detection-report.txt
